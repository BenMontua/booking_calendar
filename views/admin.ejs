<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <title>Admin – Preise verwalten</title>

  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 1rem;
    }

    #calendar {
      max-width: 1100px;
      margin: 0 auto;
    }

    #priceModal {
      position: fixed;
      top: 20%;
      left: 50%;
      transform: translateX(-50%);
      background: white;
      border: 1px solid #ccc;
      padding: 1rem;
      display: none;
      z-index: 1000;
    }

    #priceModal input, #priceModal select {
      display: block;
      margin: 0.5rem 0;
      width: 100%;
    }

    #overlay {
      display: none;
      position: fixed;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0,0,0,0.3);
      z-index: 900;
    }

    .fc-event-title {
      font-size: 0.85em;
    }

    /* Buchungs-Bearbeitungsdialog */
    #bookingModal {
      display: none;
      position: fixed;
      top: 20%;
      left: 50%;
      transform: translateX(-50%);
      background: white;
      border: 1px solid #ccc;
      padding: 1rem;
      z-index: 1001;
    }

    #bookingModal input, #bookingModal select {
      display: block;
      margin: 0.5rem 0;
      width: 100%;
    }
  </style>
</head>
<body>
  <h1>Preisverwaltung (Admin)</h1>
  <div id="calendar"></div>

  <!-- Modal für Preis-Eingabe -->
  <div id="overlay"></div>
  <div id="priceModal">
    <h3>Preis festlegen</h3>
    <form id="modalForm">
      <label>Zeitraum</label>
      <input type="text" id="modalDates" disabled />
      <label>Kategorie</label>
      <select name="category">
        <option value="Category1">Standard</option>
        <option value="Category2">Mit Haustier</option>
      </select>
      <label>Preis (€)</label>
      <input type="number" name="price" step="0.01" required />
      <input type="hidden" name="start_date" />
      <input type="hidden" name="end_date" />
      <button type="submit">Speichern</button>
      <button type="button" id="cancelBtn">Abbrechen</button>
    </form>
  </div>

  <!-- Kategorie-Lösch-Dialog -->
  <div id="deleteOverlay" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.3); z-index:900;"></div>
  <div id="deleteModal" style="display:none; position:fixed; top:30%; left:50%; transform:translateX(-50%); background:white; border:1px solid #ccc; padding:1rem; z-index:1000;">
    <h3>Preise löschen</h3>
    <form id="deleteForm">
      <label>Zeitraum</label>
      <input type="text" id="deleteDates" disabled />
      <label>Kategorie</label>
      <select name="deleteCategory" required>
        <option value="Category1">Standard</option>
        <option value="Category2">Mit Haustier</option>
      </select>
      <button type="submit">Löschen</button>
      <button type="button" id="deleteCancelBtn">Abbrechen</button>
    </form>
  </div>

  <!-- Buchungs-Bearbeitungsdialog (Beispiel) -->
  <div id="bookingModal" style="display:none; position:fixed; top:20%; left:50%; transform:translateX(-50%); background:white; border:1px solid #ccc; padding:1rem; z-index:1001;">
    <h3>Buchung bearbeiten</h3>
    <form id="bookingForm">
      <label>Titel</label>
      <input type="text" name="title" required>
      <label>Von</label>
      <input type="date" name="start_date" required>
      <label>Bis</label>
      <input type="date" name="end_date" required>
      <label>Name</label>
      <input type="text" name="name" required>
      <label>E-Mail</label>
      <input type="email" name="email" required>
      <label>Kategorie</label>
      <select name="category" required>
        <option value="Category1">Standard</option>
        <option value="Category2">Mit Haustier</option>
      </select>
      <!-- Weitere Felder nach Bedarf -->
      <button type="submit">Speichern</button>
      <button type="button" id="bookingDeleteBtn" style="background:#c00; color:#fff;">Löschen</button>
      <button type="button" id="bookingCancelBtn">Abbrechen</button>
    </form>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.18/index.global.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      let lastSelectEvent = null;

      const calendar = new FullCalendar.Calendar(document.getElementById('calendar'), {
        initialView: 'dayGridMonth',
        selectable: true,
        selectLongPressDelay: 1, // sofortiges Select
        height: 'auto',
        eventDisplay: 'block',
        events: async function(fetchInfo, successCallback, failureCallback) {
          try {
            // Preise laden
            const pricesRes = await fetch('/api/prices');
            const prices = await pricesRes.json();

            // Buchungen laden
            const bookingsRes = await fetch('/api/events');
            const bookings = await bookingsRes.json();

            // Preise und Buchungen zusammenführen
            successCallback([...prices, ...bookings]);
          } catch (err) {
            failureCallback(err);
          }
        },
        eventContent: function(arg) {
          // Wenn es ein Event mit extendedProps.name ist (also eine Buchung), zeige den Namen an
          if (arg.event.extendedProps && arg.event.extendedProps.name) {
            return { html: `${arg.event.extendedProps.name}` };
          }

          let title = "Standard";
          // Sonst Category1 (z.B. Titel)
          if (arg.event.extendedProps && arg.event.extendedProps.price && arg.event.extendedProps.priceCategory) {
            title = "Standard: " + arg.event.extendedProps.price;
            if (arg.event.extendedProps.priceCategory === 'Category2') {
              title = "Mit Haustier: " + arg.event.extendedProps.price;
            }
          }
          return { html: title };
        },
        select: function (info) {
          // Prüfe, ob STRG gedrückt ist
          if (window.event && (window.event.ctrlKey || window.event.metaKey)) {
            // Bereichsauswahl: Dialog für Kategorie-Löschung anzeigen
            showDeleteModal(
              info.startStr,
              new Date(new Date(info.endStr).getTime() - 86400000).toISOString().slice(0, 10)
            );
          } else {
            // Category1funktion: Preis-Eingabe
            showModal(info.startStr, info.endStr);
          }
        },
        eventClick: async function(info) {
          // Prüfe, ob es eine Buchung ist (z.B. an der Farbe oder an extendedProps)
          if (info.event.extendedProps && info.event.extendedProps.name) {
            // Buchungsdialog öffnen und Felder befüllen
            showBookingEditModal(info.event);
          } else {
            // Preis löschen (wie gehabt)
            if (window.event && (window.event.ctrlKey || window.event.metaKey)) {
              if (confirm(`Preis vom ${info.event.startStr} bis ${info.event.endStr || info.event.startStr} löschen?`)) {
                const response = await fetch(`/api/prices/${info.event.id}`, {
                  method: 'DELETE'
                });
                if (response.ok) {
                  calendar.refetchEvents();
                } else {
                  alert('Fehler beim Löschen');
                }
              }
            }
          }
        }
      });

      calendar.render();

      // Modal-Logik
      const overlay = document.getElementById('overlay');
      const modal = document.getElementById('priceModal');
      const form = document.getElementById('modalForm');

      function showModal(start, end) {
        form.start_date.value = start;
        form.end_date.value = new Date(new Date(end).getTime() - 86400000).toISOString().slice(0, 10);
        document.getElementById('modalDates').value = `${start} bis ${form.end_date.value}`;
        overlay.style.display = 'block';
        modal.style.display = 'block';
      }

      function hideModal() {
        modal.style.display = 'none';
        overlay.style.display = 'none';
        form.reset();
      }

      form.addEventListener('submit', async function (e) {
        e.preventDefault();
        const body = {
          start_date: form.start_date.value,
          end_date: form.end_date.value,
          category: form.category.value,
          price: parseFloat(form.price.value)
        };

        const response = await fetch('/api/prices', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });

        if (response.ok) {
          calendar.refetchEvents();
          hideModal();
        } else {
          alert('Fehler beim Speichern');
        }
      });

      document.getElementById('cancelBtn').addEventListener('click', hideModal);
      overlay.addEventListener('click', hideModal);

      // --- NEU: Kategorie-Lösch-Dialog ---
      const deleteOverlay = document.getElementById('deleteOverlay');
      const deleteModal = document.getElementById('deleteModal');
      const deleteForm = document.getElementById('deleteForm');
      let deleteStart = null, deleteEnd = null;

      function showDeleteModal(start, end) {
        deleteStart = start;
        deleteEnd = end;
        document.getElementById('deleteDates').value = `${start} bis ${end}`;
        deleteOverlay.style.display = 'block';
        deleteModal.style.display = 'block';
      }

      function hideDeleteModal() {
        deleteModal.style.display = 'none';
        deleteOverlay.style.display = 'none';
        deleteForm.reset();
      }

      deleteForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const category = deleteForm.deleteCategory.value;
        if (!category) return;
        //if (!confirm(`Alle Preise der Kategorie "${category}" vom ${deleteStart} bis ${deleteEnd} löschen?`)) return;

        const response = await fetch('/api/prices', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            start_date: deleteStart,
            end_date: deleteEnd,
            category: category
          })
        });
        if (response.ok) {
          calendar.refetchEvents();
          hideDeleteModal();
        } else {
          alert('Fehler beim Löschen');
        }
      });

      document.getElementById('deleteCancelBtn').addEventListener('click', hideDeleteModal);
      deleteOverlay.addEventListener('click', hideDeleteModal);

      // --- NEU: Buchungs-Editier-Modal ---
      const bookingModal = document.getElementById('bookingModal');
      const bookingForm = document.getElementById('bookingForm');
      const bookingDeleteBtn = document.getElementById('bookingDeleteBtn');
      const bookingCancelBtn = document.getElementById('bookingCancelBtn');
      let currentBookingId = null;

      function showBookingEditModal(event) {
        currentBookingId = event.id;
        bookingForm.title.value = event.title || '';
        bookingForm.start_date.value = event.startStr ? event.startStr.slice(0,10) : '';
        bookingForm.end_date.value = event.endStr ? event.endStr.slice(0,10) : '';
        bookingForm.name.value = event.extendedProps?.name || '';
        bookingForm.email.value = event.extendedProps?.email || '';
        // Kategorie vorbelegen: prüfe mehrere Quellen und gleiche auf die neuen Werte ab
        let cat = event.extendedProps?.category || event.category || '';
        if (cat === 'Category1') cat = 'Standard';
        else if (cat === 'Category2') cat = 'Mit Haustier';
        bookingForm.category.value = cat;
        bookingModal.style.display = 'block';
      }

      function hideBookingModal() {
        bookingModal.style.display = 'none';
        bookingForm.reset();
        currentBookingId = null;
      }

      bookingForm.onsubmit = async function(e) {
        e.preventDefault();
        if (!currentBookingId) return;
        const body = {
          title: bookingForm.title.value,
          start_date: bookingForm.start_date.value,
          end_date: bookingForm.end_date.value,
          name: bookingForm.name.value,
          email: bookingForm.email.value,
          category: bookingForm.category.value
        };
        const response = await fetch(`/api/events/${currentBookingId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });
        if (response.ok) {
          calendar.refetchEvents();
          hideBookingModal();
        } else {
          alert('Fehler beim Speichern');
        }
      };

      bookingDeleteBtn.onclick = async function() {
        if (!currentBookingId) return;
        if (!confirm('Buchung wirklich löschen?')) return;
        const response = await fetch(`/api/events/${currentBookingId}`, { method: 'DELETE' });
        if (response.ok) {
          calendar.refetchEvents();
          hideBookingModal();
        } else {
          alert('Fehler beim Löschen');
        }
      };

      bookingCancelBtn.onclick = hideBookingModal;
    });
  </script>
</body>
</html>
