<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <title>Admin ‚Äì Preise verwalten</title>

  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 1rem;
    }

    #calendar {
      margin: 0 auto;
      width: 90vw;
      max-width: 90vw;
    }

    #priceModal {
      position: fixed;
      top: 20%;
      left: 50%;
      transform: translateX(-50%);
      background: white;
      border: 1px solid #ccc;
      padding: 1rem;
      display: none;
      z-index: 1000;
    }

    #priceModal input, #priceModal select {
      display: block;
      margin: 0.5rem 0;
      width: 100%;
    }

    #overlay {
      display: none;
      position: fixed;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0,0,0,0.3);
      z-index: 900;
    }

    .fc-event-title {
      font-size: 0.85em;
      text-align: center;
      width: 100%;
      display: block;
    }

    /* Buchungs-Bearbeitungsdialog */
    #bookingModal {
      display: none;
      position: fixed;
      top: 20%;
      left: 50%;
      transform: translateX(-50%);
      background: white;
      border: 1px solid #ccc;
      padding: 1rem;
      z-index: 1001;
    }

    #bookingModal input, #bookingModal select {
      display: block;
      margin: 0.5rem 0;
      width: 100%;
    }
  </style>
</head>
<body>
  <h1>Preisverwaltung (Admin)</h1>
  <label style="display:block; margin-bottom:1em;">
    <input type="checkbox" id="toggleCombinedCalendar">
    "Kombinierten Kalender" anzeigen
  </label>
  <div id="calendar"></div>

  <!-- Modal f√ºr Preis-Eingabe -->
  <div id="overlay"></div>
  <div id="priceModal">
    <h3>Preis festlegen</h3>
    <form id="modalForm">
      <label>Zeitraum</label>
      <input type="text" id="modalDates" disabled />
      <label>Kategorie</label>
      <select name="category">
        <option value="Category1">Standard</option>
        <option value="Category2">Mit Haustier</option>
      </select>
      <label>Preis (‚Ç¨)</label>
      <input type="number" name="price" step="0.01" required />
      <label>Mindestn√§chte</label>
      <input type="number" name="min_nights" min="2" value="3" required />
      <input type="hidden" name="start_date" />
      <input type="hidden" name="end_date" />
      <button type="submit">Speichern</button>
      <button type="button" id="cancelBtn">Abbrechen</button>
    </form>
  </div>

  <!-- Kategorie-L√∂sch-Dialog -->
  <div id="deleteOverlay" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.3); z-index:900;"></div>
  <div id="deleteModal" style="display:none; position:fixed; top:30%; left:50%; transform:translateX(-50%); background:white; border:1px solid #ccc; padding:1rem; z-index:1000;">
    <h3>Preise l√∂schen</h3>
    <form id="deleteForm">
      <label>Zeitraum</label>
      <input type="text" id="deleteDates" disabled />
      <label>Kategorie</label>
      <select name="deleteCategory" required>
        <option value="Category1">Standard</option>
        <option value="Category2">Mit Haustier</option>
      </select>
      <button type="submit">L√∂schen</button>
      <button type="button" id="deleteCancelBtn">Abbrechen</button>
    </form>
  </div>

  <!-- Buchungs-Bearbeitungsdialog (Beispiel) -->
  <div id="bookingModal" style="display:none; position:fixed; top:20%; left:50%; transform:translateX(-50%); background:white; border:1px solid #ccc; padding:1rem; z-index:1001;">
    <h3>Buchung bearbeiten</h3>
    <form id="bookingForm">
      <label>Titel</label>
      <input type="text" name="title" required>
      <label>Von</label>
      <input type="date" name="start_date" required>
      <label>Bis</label>
      <input type="date" name="end_date" required>
      <label>Name</label>
      <input type="text" name="name" required>
      <label>E-Mail</label>
      <input type="email" name="email" required>
      <label>Kategorie</label>
      <select name="category" required>
        <option value="Category1">Standard</option>
        <option value="Category2">Mit Haustier</option>
      </select>
      <!-- Weitere Felder nach Bedarf -->
      <button type="submit">Speichern</button>
      <button type="button" id="bookingDeleteBtn" style="background:#c00; color:#fff;">L√∂schen</button>
      <button type="button" id="bookingCancelBtn">Abbrechen</button>
    </form>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.18/index.global.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      let lastSelectEvent = null;
      let scrollToTodayPending = false;

      // Checkbox-Status merken
      let showCombinedCalendar = false;
      const checkbox = document.getElementById('toggleCombinedCalendar');
      checkbox.addEventListener('change', function() {
        showCombinedCalendar = this.checked;
        calendar.refetchEvents();
      });

      // FullCalendar-Setup
      const calendar = new FullCalendar.Calendar(document.getElementById('calendar'), {
        initialView: 'multiMonthYear',
        multiMonthMaxColumns: 2,
        //multiMonthMaxRows: 1, // Zeigt ca. 1,5 Monate (2 Reihen, aber nur 1 Spalte)
        //multiMonthMinWidth: 0, // Optional: verhindert horizontales Scrollen
        selectable: true,
        height: 'auto',
        eventDisplay: 'block',
        locale: 'de',
        now: new Date(),
        nowIndicator: true,
        firstDay: 1, // Montag als erster Tag
        headerToolbar: {
          left: 'prev,next heute',
          center: 'title',
          right: ''
        },
        customButtons: {
          heute: {
            text: 'Heute',
            click: function() {
              calendar.today();
              setTimeout(scrollToCurrentMonth, 50);
            }
          }
        },
        events: async function(fetchInfo, successCallback, failureCallback) {
          try {
            // Preise laden
            const pricesRes = await fetch('/api/prices');
            const prices = await pricesRes.json();

            // Buchungen laden
            const bookingsRes = await fetch('/api/events');
            const bookings = await bookingsRes.json();

            // iCal-Events laden
            const icalRes = await fetch('/api/ical-events');
            let icalEvents = await icalRes.json();

            // Filter "Alle Kalender" Events je nach Checkbox
            if (!showCombinedCalendar) {
              icalEvents = icalEvents.filter(ev => ev.calendarName !== "Alle Kalender");
            }

            // Alle belegten Tage sammeln
            const bookedDays = new Set();
            bookings.forEach(ev => {
              const start = new Date(ev.start);
              const end = new Date(ev.end || ev.start);
              for (
                let d = new Date(start);
                d < end;
                d.setDate(d.getDate() + 1)
              ) {
                bookedDays.add(d.toISOString().slice(0, 10));
              }
            });

            // Preise filtern und Titel bauen (deutsche Titel)
            const priceEvents = prices.filter(price => {
              const start = new Date(price.start);
              const end = new Date(price.end || price.start);
              for (
                let d = new Date(start);
                d <= end;
                d.setDate(d.getDate() + 1)
              ) {
                if (bookedDays.has(d.toISOString().slice(0, 10))) return false;
              }
              return true;
            }).map(price => {
              let preisText = "";
              let kategorieText = "";
              if (price.extendedProps && price.extendedProps.price && price.extendedProps.priceCategory) {
                preisText = price.extendedProps.price;
                kategorieText = price.extendedProps.priceCategory === 'Category2' ? "Mit Haustier" : "Standard";
              } else if (price.price && price.category) {
                preisText = price.price;
                kategorieText = price.category === 'Category2' ? "Mit Haustier" : "Standard";
              }
              return {
                title: `${preisText}`,
                start: price.start,
                end: price.end,
                backgroundColor: price.backgroundColor || "#ffeeba",
                borderColor: price.backgroundColor || "#ffeeba"
              };
            });

            // Alle Events zusammen anzeigen
            successCallback([...priceEvents, ...bookings, ...icalEvents]);
          } catch (err) {
            failureCallback(err);
          }
        },
        eventContent: function(arg) {
          if (arg.event.extendedProps && arg.event.extendedProps.name) {
            const personen = arg.event.extendedProps.guests ? `${arg.event.extendedProps.guests} Personen` : "";
            const haustier = arg.event.extendedProps.has_pet ? " mit Haustier üêæ" : "";
            return { html: `${arg.event.extendedProps.name} - ${personen}${haustier}` };
          }
          return { html: arg.event.title };
        },
        select: function (info) {
          // Pr√ºfe, ob STRG gedr√ºckt ist
          if (window.event && (window.event.ctrlKey || window.event.metaKey)) {
            // Bereichsauswahl: Dialog f√ºr Kategorie-L√∂schung anzeigen
            showDeleteModal(
              info.startStr,
              new Date(new Date(info.endStr).getTime() - 86400000).toISOString().slice(0, 10)
            );
          } else {
            // Category1funktion: Preis-Eingabe
            showModal(info.startStr, info.endStr);
          }
        },
        eventClick: async function(info) {
          // Pr√ºfe, ob es eine Buchung ist (z.B. an der Farbe oder an extendedProps)
          if (info.event.extendedProps && info.event.extendedProps.name) {
            // Buchungsdialog √∂ffnen und Felder bef√ºllen
            showBookingEditModal(info.event);
          } else {
            // Preis l√∂schen (wie gehabt)
            if (window.event && (window.event.ctrlKey || window.event.metaKey)) {
              if (confirm(`Preis vom ${info.event.startStr} bis ${info.event.endStr || info.event.startStr} l√∂schen?`)) {
                const response = await fetch(`/api/prices/${info.event.id}`, {
                  method: 'DELETE'
                });
                if (response.ok) {
                  calendar.refetchEvents();
                } else {
                  alert('Fehler beim L√∂schen');
                }
              }
            }
          }
        },
        // --- NEU: Automatisches Scrollen zum aktuellen Monat ---
        datesSet: function(info) {
          if (calendar.view.type === 'multiMonthYear') {
            setTimeout(() => {
              scrollToCurrentMonth();
              scrollToTodayPending = false;
            }, 50);
          }
        }
      });

      calendar.render();

      // Scroll-Funktion f√ºr aktuellen Monat
      function scrollToCurrentMonth() {
        const today = new Date();
        const monthName = today.toLocaleString('de-DE', { month: 'long' }).toLowerCase();
        const year = today.getFullYear();

        const monthEls = document.querySelectorAll('.fc-multimonth-month');
        for (const el of monthEls) {
          let header = el.querySelector('.fc-multimonth-title').textContent.trim().toLowerCase();
          if (!header && el.firstChild) header = el.firstChild;

          if (header === monthName) {
            el.scrollIntoView({ behavior: 'smooth', block: 'start' });
            break;
          }
        }
      }

      // Heute-Button nach Rendern abfangen und Scroll ausl√∂sen
      setTimeout(() => {
        const heuteBtn = document.querySelector('.fc-heute-button');
        if (heuteBtn) {
          heuteBtn.addEventListener('click', () => {
            setTimeout(scrollToCurrentMonth, 50);
          });
        }
      }, 100);

      // Modal-Logik
      const overlay = document.getElementById('overlay');
      const modal = document.getElementById('priceModal');
      const form = document.getElementById('modalForm');

      async function showModal(start, end) {
        form.start_date.value = start;
        form.end_date.value = new Date(new Date(end).getTime() - 86400000).toISOString().slice(0, 10);
        document.getElementById('modalDates').value = `${start} bis ${form.end_date.value}`;

        // Werte aus DB f√ºr den ersten Tag vorbelegen
        try {
          const pricesRes = await fetch('/api/prices');
          const prices = await pricesRes.json();
          const firstDayPrice = prices.find(p => p.start === start && p.extendedProps.priceCategory === form.category.value);
          if (firstDayPrice) {
            const priceNum = parseFloat(firstDayPrice.extendedProps.price.toString().replace(/[^0-9,.]/g, '').replace(',', '.'));
            form.price.value = isNaN(priceNum) ? '' : priceNum; 
            form.min_nights.value = firstDayPrice.extendedProps.minNights;
          } else {
            form.price.value = '';
            form.min_nights.value = 3; // Default
          }
        } catch (e) {
          form.price.value = '';
          form.min_nights.value = 3;
        }

        overlay.style.display = 'block';
        modal.style.display = 'block';
        form.price.focus();
      }

      function hideModal() {
        modal.style.display = 'none';
        overlay.style.display = 'none';
        form.reset();
      }

      form.addEventListener('submit', async function (e) {
        e.preventDefault();
        const body = {
          start_date: form.start_date.value,
          end_date: form.end_date.value,
          category: form.category.value,
          price: parseFloat(form.price.value),
          min_nights: parseInt(form.min_nights.value) // NEU
        };

        const response = await fetch('/api/prices', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });

        if (response.ok) {
          calendar.refetchEvents();
          hideModal();
        } else {
          alert('Fehler beim Speichern');
        }
      });

      document.getElementById('cancelBtn').addEventListener('click', hideModal);
      overlay.addEventListener('click', hideModal);

      // --- NEU: Kategorie-L√∂sch-Dialog ---
      const deleteOverlay = document.getElementById('deleteOverlay');
      const deleteModal = document.getElementById('deleteModal');
      const deleteForm = document.getElementById('deleteForm');
      let deleteStart = null, deleteEnd = null;

      function showDeleteModal(start, end) {
        deleteStart = start;
        deleteEnd = end;
        document.getElementById('deleteDates').value = `${start} bis ${end}`;
        deleteOverlay.style.display = 'block';
        deleteModal.style.display = 'block';
      }

      function hideDeleteModal() {
        deleteModal.style.display = 'none';
        deleteOverlay.style.display = 'none';
        deleteForm.reset();
      }

      deleteForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const category = deleteForm.deleteCategory.value;
        if (!category) return;
        //if (!confirm(`Alle Preise der Kategorie "${category}" vom ${deleteStart} bis ${deleteEnd} l√∂schen?`)) return;

        const response = await fetch('/api/prices', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            start_date: deleteStart,
            end_date: deleteEnd,
            category: category
          })
        });
        if (response.ok) {
          calendar.refetchEvents();
          hideDeleteModal();
        } else {
          alert('Fehler beim L√∂schen');
        }
      });

      document.getElementById('deleteCancelBtn').addEventListener('click', hideDeleteModal);
      deleteOverlay.addEventListener('click', hideDeleteModal);

      // --- NEU: Buchungs-Editier-Modal ---
      const bookingModal = document.getElementById('bookingModal');
      const bookingForm = document.getElementById('bookingForm');
      const bookingDeleteBtn = document.getElementById('bookingDeleteBtn');
      const bookingCancelBtn = document.getElementById('bookingCancelBtn');
      let currentBookingId = null;

      function showBookingEditModal(event) {
        currentBookingId = event.id;
        bookingForm.title.value = event.title || '';
        bookingForm.start_date.value = event.startStr ? event.startStr.slice(0,10) : '';
        bookingForm.end_date.value = event.endStr
          ? new Date(new Date(event.endStr).getTime() - 86400000).toISOString().slice(0,10)
          : '';
        bookingForm.name.value = event.extendedProps?.name || '';
        bookingForm.email.value = event.extendedProps?.email || '';
        // Kategorie vorbelegen: pr√ºfe mehrere Quellen und gleiche auf die neuen Werte ab
        let cat = event.extendedProps?.category || event.category || '';
        if (cat === 'Category1') cat = 'Standard';
        else if (cat === 'Category2') cat = 'Mit Haustier';
        bookingForm.category.value = cat;
        bookingModal.style.display = 'block';
      }

      function hideBookingModal() {
        bookingModal.style.display = 'none';
        bookingForm.reset();
        currentBookingId = null;
      }

      bookingForm.onsubmit = async function(e) {
        e.preventDefault();
        if (!currentBookingId) return;
        const body = {
          title: bookingForm.title.value,
          start_date: bookingForm.start_date.value,
          end_date: bookingForm.end_date.value,
          name: bookingForm.name.value,
          email: bookingForm.email.value,
          category: bookingForm.category.value
        };
        const response = await fetch(`/api/events/${currentBookingId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });
        if (response.ok) {
          calendar.refetchEvents();
          hideBookingModal();
        } else {
          alert('Fehler beim Speichern');
        }
      };

      bookingDeleteBtn.onclick = async function() {
        if (!currentBookingId) return;
        if (!confirm('Buchung wirklich l√∂schen?')) return;
        const response = await fetch(`/api/events/${currentBookingId}`, { method: 'DELETE' });
        if (response.ok) {
          calendar.refetchEvents();
          hideBookingModal();
        } else {
          alert('Fehler beim L√∂schen');
        }
      };

      bookingCancelBtn.onclick = hideBookingModal;
    });
  </script>
</body>
</html>
